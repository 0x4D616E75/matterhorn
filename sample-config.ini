[mattermost]
# Username. Optional. If missing, you'll be asked to provide one on
# startup.
# user: <username>

# Hostname: Optional. If missing, you'll be asked to provide one on
# startup.
# host: <hostname>

# If the team setting is set, it must be the name of a team of which
# the user is a member. This is the team you'll automatically use when
# connecting and you'll bypass the team selection. If the setting is
# absent or isn't one of your teams, you'll be prompted for a choice of
# your teams.
#
# team: <team name>

# Server port. Optional; defaults to 443.
#
# port: 443

# Password command. Optional. If this and the password option are both
# missing or give the wrong password, you'll be prompted on startup.
#
# You can also just use
# pass: password
# but this is much less secure than supplying a command or being
# prompted interactively.
#
# For OS X, the built-in security command can be used to get a password
# from the OS X keychain. To make this work you'll need to put your
# Mattermost password into your keychain as follows:
#
# * Open the Keychain application (Applications -> Utilities -> Keychain
#   Access)
# * Click the "login" keychain.
# * If necessary, click the unlock icon at the top-left corner of the
#   window to unlock keychain access.
# * Click the "+" button at the bottom of the window.
# * Enter a keychain item name (e.g. "mattermost"), your Mattermost
#   username, and your password.
# * Click "Add".
#
# Now the keychain item name can be used with the "security" command
# here:
#
# passcmd: security find-generic-password -s <password name> -w
#
# On Linux, there are a number of options.  secret-tool is part of
# libsecret (in libsecret-tools on Ubuntu) and acts as a uniform
# interface to all password managers implementing the LibSecret D-Bus
# API (including kwallet and gnome-keyring).  Assuming that you have
# stored a password using
#
# $ secret-tool store --label='matterhorn' matterhorn password`
#
# You can then set:
#
# passcmd: secret-tool lookup matterhorn password

# This optional setting controls how the client displays times. If it's
# absent, you get the default behavior ("%R"). If it's present but
# empty, that turns timestamps off. Otherwise its value is used as the
# time format string.
#
# The format string is that accepted by 'formatTime':
# https://hackage.haskell.org/package/time-1.6.0.1/docs/Data-Time-Format.html#v:formatTime
#
# timeFormat: %R

# This optional setting controls how the client displays dates. If it's
# absent, you get the default behavior ("%Y-%m-%d"). Otherwise its
# value is used as the time format string.
#
# The format string is that accepted by 'formatTime':
# https://hackage.haskell.org/package/time-1.6.0.1/docs/Data-Time-Format.html#v:formatTime
#
# dateFormat: %Y-%m-%d

# Theme name
# For now, the choices are
#
#   builtin:dark (default)
#   builtin:light
#
# theme: builtin:dark

# Smart character pair insertion for "``", "**", and "__".
# Allowed values are True and False (case sensitive)
# Invalid values are ignored.
# Default is True
#
# smartbacktick = True

# Terminal bell control: ring the terminal bell whenever a new message
# arrives (for use with e.g. terminal multiplexers)
#
# Allowed values are True and False (case sensitive)
# Default is False
# activityBell = False

# The command to use to open URLs found in chat messages.
# OS X:
# urlOpenCommand = open
# Linux:
# urlOpenCommand = xdg-open

# Whether to show a message rendering preview
# Default: False
# showMessagePreview = False

# Whether to enable the spell checker if "aspell" is present on the
# system.
# Default: False
# enableAspell = False

# Name a specific Aspell dictionary to use. See "aspell --help" for a
# list of available dictionaries on your system.
# Default: fall back to environment / locale
# aspellDictionary = "..."
