
This one will just need to iterate over all teams to stop all Aspell
instances once we start one for each team:
src/Matterhorn/App.hs:91:    case finalSt^.csCurrentTeam.tsEditState.cedSpellChecker of

Needs to use the team that the channel cId belongs to:
src/Matterhorn/State/Messages.hs:344:          selMsgId <- use (csCurrentTeam.tsMessageSelect.to selectMessageId)
src/Matterhorn/State/Messages.hs:367:                csCurrentTeam.tsMessageSelect .= MessageSelectState Nothing
src/Matterhorn/State/Messages.hs:382:                  csCurrentTeam.tsMessageSelect .= MessageSelectState (pure $ MessagePostId earliestPId)
src/Matterhorn/State/Messages.hs:394:                  csCurrentTeam.tsMessageSelect .= MessageSelectState (gapMsg^.mMessageId)
src/Matterhorn/State/Messages.hs:403:                  csCurrentTeam.tsMessageSelect .= MessageSelectState (pure $ MessagePostId latestPId)
src/Matterhorn/State/Messages.hs:415:                  csCurrentTeam.tsMessageSelect .= MessageSelectState (gapMsg^.mMessageId)

Needs to use the team for the channel in which the jumped post is located:
src/Matterhorn/State/Messages.hs:907:                      csCurrentTeam.tsMessageSelect .= MessageSelectState (msg^.mMessageId)

Needs to use the team for the channel in which the script was run:
src/Matterhorn/Scripts.hs:50:                mode <- use (csCurrentTeam.tsEditState.cedEditMode)

This lens needs to resolve to the team that was active at the time of the overlay mode switch, NOT csCurrentTeam:
src/Matterhorn/State/ChannelListOverlay.hs:32:    enterListOverlayMode (csCurrentTeam.tsChannelListOverlay) ChannelListOverlay

This lens needs to resolve to the team that was active at the time of the overlay mode switch, NOT csCurrentTeam:
src/Matterhorn/State/UserListOverlay.hs:86:    enterListOverlayMode (csCurrentTeam.tsUserListOverlay) UserListOverlay scope enterHandler getUserSearchResults

This lens needs to resolve to the team that was active at the time of the overlay mode switch, NOT csCurrentTeam:
src/Matterhorn/State/ReactionEmojiListOverlay.hs:42:            enterListOverlayMode (csCurrentTeam.tsReactionEmojiListOverlay) ReactionEmojiListOverlay

All of these uses need to resolve to the team that was active at the time of the overlay mode switch, NOT csCurrentTeam:
src/Matterhorn/State/Flagging.hs:51:              csCurrentTeam.tsPostListOverlay.postListPosts %=
src/Matterhorn/State/Flagging.hs:57:              selId <- use (csCurrentTeam.tsPostListOverlay.postListSelected)
src/Matterhorn/State/Flagging.hs:58:              posts <- use (csCurrentTeam.tsPostListOverlay.postListPosts)
src/Matterhorn/State/Flagging.hs:62:              csCurrentTeam.tsPostListOverlay.postListSelected .= nextId
src/Matterhorn/State/Flagging.hs:63:              csCurrentTeam.tsPostListOverlay.postListPosts %=

These lenses need to resolve to the team based on the cId argument to handleInputSubmission:
src/Matterhorn/State/Editing.hs:224:    csCurrentTeam.tsEditState.cedEditor %= applyEdit Z.clearZipper
src/Matterhorn/State/Editing.hs:225:    csCurrentTeam.tsEditState.cedEphemeral.eesInputHistoryPosition .= Nothing
src/Matterhorn/State/Editing.hs:232:          attachments <- use (csCurrentTeam.tsEditState.cedAttachmentList.L.listElementsL)
src/Matterhorn/State/Editing.hs:233:          mode <- use (csCurrentTeam.tsEditState.cedEditMode)
src/Matterhorn/State/Editing.hs:244:    csCurrentTeam.tsEditState.cedEditMode .= NewPost

This lens needs to use the team ID effective when the spell check request was made:
src/Matterhorn/State/Editing.hs:406:                        csCurrentTeam.tsEditState.cedMisspellings .= allMistakes

The team ID argument here needs to be an argument to setCompletionAlternatives and should then be used throughout this function:
src/Matterhorn/State/Autocomplete.hs:329:   tId <- use csCurrentTeamId

This lens should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:157:               then use (csCurrentTeam.tsRecentChannel)

This lens should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:435:    ch <- use (csCurrentTeam.tsPendingChannelChange)

These should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:499:            csCurrentTeam.tsPendingChannelChange .= Nothing
src/Matterhorn/State/Channels.hs:512:                                csCurrentTeam.tsPendingChannelChange .=
src/Matterhorn/State/Channels.hs:524:                                csCurrentTeam.tsPendingChannelChange .=

These should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:731:            csCurrentTeam.tsFocus %= Z.filterZipper ((/= cId) . channelListEntryChannelId)

These should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:1062:            csCurrentTeam.tsPendingChannelChange .= (Just $ ChangeByChannelId chanId act)
src/Matterhorn/State/Channels.hs:1078:            csCurrentTeam.tsPendingChannelChange .= (Just $ ChangeByUserId $ user^.uiId)

src/Matterhorn/State/MessageSelect.hs:59:        selMsgId <- selectMessageId $ st^.csCurrentTeam.tsMessageSelect
src/Matterhorn/State/MessageSelect.hs:77:        csCurrentTeam.tsMessageSelect .= MessageSelectState (recentMsg >>= _mMessageId)
src/Matterhorn/State/MessageSelect.hs:122:    csCurrentTeam.tsViewedMessage .= Just (m, w)
src/Matterhorn/State/MessageSelect.hs:173:    selected <- use (csCurrentTeam.tsMessageSelect.to selectMessageId)
src/Matterhorn/State/MessageSelect.hs:178:            csCurrentTeam.tsMessageSelect .= MessageSelectState (nextMsgId <|> selected)
src/Matterhorn/State/MessageSelect.hs:183:    selected <- use (csCurrentTeam.tsMessageSelect.to selectMessageId)
src/Matterhorn/State/MessageSelect.hs:188:            csCurrentTeam.tsMessageSelect .= MessageSelectState (nextMsgId <|> selected)
src/Matterhorn/State/MessageSelect.hs:205:    selected <- use (csCurrentTeam.tsMessageSelect.to selectMessageId)
src/Matterhorn/State/MessageSelect.hs:211:                csCurrentTeam.tsMessageSelect .= MessageSelectState (firstMsg^.mMessageId <|> selected)
src/Matterhorn/State/MessageSelect.hs:217:    selected <- use (csCurrentTeam.tsMessageSelect.to selectMessageId)
src/Matterhorn/State/MessageSelect.hs:223:                csCurrentTeam.tsMessageSelect .= MessageSelectState (lastSelMsg^.mMessageId <|> selected)
src/Matterhorn/State/MessageSelect.hs:239:                          csCurrentTeam.tsEditState.cedEditMode .= NewPost
src/Matterhorn/State/MessageSelect.hs:252:            csCurrentTeam.tsEditState.cedEditMode .= Replying rootMsg p
src/Matterhorn/State/MessageSelect.hs:263:            csCurrentTeam.tsEditState.cedEditMode .= Editing p (msg^.mType)
src/Matterhorn/State/MessageSelect.hs:275:            csCurrentTeam.tsEditState.cedEditor %= applyEdit (insertMany toEdit . clearZipper)

src/Matterhorn/State/PostListOverlay.hs:36:  csCurrentTeam.tsPostListOverlay.postListPosts .= msgs
src/Matterhorn/State/PostListOverlay.hs:40:  csCurrentTeam.tsPostListOverlay.postListSelected .= pId
src/Matterhorn/State/PostListOverlay.hs:49:  csCurrentTeam.tsPostListOverlay.postListPosts .= emptyDirSeq
src/Matterhorn/State/PostListOverlay.hs:50:  csCurrentTeam.tsPostListOverlay.postListSelected .= Nothing
src/Matterhorn/State/PostListOverlay.hs:100:  selId <- use (csCurrentTeam.tsPostListOverlay.postListSelected)
src/Matterhorn/State/PostListOverlay.hs:101:  posts <- use (csCurrentTeam.tsPostListOverlay.postListPosts)
src/Matterhorn/State/PostListOverlay.hs:107:      csCurrentTeam.tsPostListOverlay.postListSelected .= pId
src/Matterhorn/State/PostListOverlay.hs:118:  selId <- use (csCurrentTeam.tsPostListOverlay.postListSelected)
src/Matterhorn/State/PostListOverlay.hs:119:  posts <- use (csCurrentTeam.tsPostListOverlay.postListPosts)
src/Matterhorn/State/PostListOverlay.hs:125:      csCurrentTeam.tsPostListOverlay.postListSelected .= pId
src/Matterhorn/State/PostListOverlay.hs:135:  msgId <- use (csCurrentTeam.tsPostListOverlay.postListSelected)
src/Matterhorn/State/PostListOverlay.hs:145:  msgId <- use (csCurrentTeam.tsPostListOverlay.postListSelected)

src/Matterhorn/Events/ChannelTopicWindow.hs:21:    csCurrentTeam.tsChannelTopicDialog.channelTopicDialogFocus %= focusNext
src/Matterhorn/Events/ChannelTopicWindow.hs:23:    csCurrentTeam.tsChannelTopicDialog.channelTopicDialogFocus %= focusPrev
src/Matterhorn/Events/ChannelTopicWindow.hs:25:    f <- use (csCurrentTeam.tsChannelTopicDialog.channelTopicDialogFocus)
src/Matterhorn/Events/ChannelTopicWindow.hs:28:            ed <- use (csCurrentTeam.tsChannelTopicDialog.channelTopicDialogEditor)
src/Matterhorn/Events/ChannelTopicWindow.hs:33:            mhHandleEventLensed (csCurrentTeam.tsChannelTopicDialog.channelTopicDialogEditor)
src/Matterhorn/Events/ChannelTopicWindow.hs:42:    f <- use (csCurrentTeam.tsChannelTopicDialog.channelTopicDialogFocus)
src/Matterhorn/Events/ChannelTopicWindow.hs:45:            mhHandleEventLensed (csCurrentTeam.tsChannelTopicDialog.channelTopicDialogEditor)

src/Matterhorn/Events/ManageAttachments.hs:42:        mhHandleEventLensed (csCurrentTeam.tsEditState.cedAttachmentList) L.handleListEvent
src/Matterhorn/Events/ManageAttachments.hs:52:          mhHandleEventLensed (csCurrentTeam.tsEditState.cedAttachmentList) L.handleListEvent (V.EvKey V.KUp [])
src/Matterhorn/Events/ManageAttachments.hs:54:          mhHandleEventLensed (csCurrentTeam.tsEditState.cedAttachmentList) L.handleListEvent (V.EvKey V.KDown [])
src/Matterhorn/Events/ManageAttachments.hs:76:    use (csCurrentTeam.tsEditState.cedFileBrowser) >>= \case
src/Matterhorn/Events/ManageAttachments.hs:87:            csCurrentTeam.tsEditState.cedFileBrowser ?= new_b
src/Matterhorn/Events/ManageAttachments.hs:93:    cur <- use (csCurrentTeam.tsEditState.cedAttachmentList.to L.listSelectedElement)
src/Matterhorn/Events/ManageAttachments.hs:123:    es <- use (csCurrentTeam.tsEditState.cedAttachmentList.L.listElementsL)
src/Matterhorn/Events/ManageAttachments.hs:131:  mhHandleEventLensed (csCurrentTeam.tsEditState.cedFileBrowser) fbHandle e
src/Matterhorn/Events/ManageAttachments.hs:138:        es <- use (csCurrentTeam.tsEditState.cedAttachmentList.L.listElementsL)
src/Matterhorn/Events/ManageAttachments.hs:155:                        oldIdx <- use (csCurrentTeam.tsEditState.cedAttachmentList.L.listSelectedL)
src/Matterhorn/Events/ManageAttachments.hs:159:                        csCurrentTeam.tsEditState.cedAttachmentList %= L.listReplace (Vector.snoc es a) newIdx
src/Matterhorn/Events/ManageAttachments.hs:165:    es <- use (csCurrentTeam.tsEditState.cedAttachmentList.L.listElementsL)
src/Matterhorn/Events/ManageAttachments.hs:166:    mSel <- use (csCurrentTeam.tsEditState.cedAttachmentList.to L.listSelectedElement)
src/Matterhorn/Events/ManageAttachments.hs:171:            oldIdx <- use (csCurrentTeam.tsEditState.cedAttachmentList.L.listSelectedL)
src/Matterhorn/Events/ManageAttachments.hs:179:            csCurrentTeam.tsEditState.cedAttachmentList %= L.listReplace (deleteAt pos es) idx
