
This one will just need to iterate over all teams to stop all Aspell
instances once we start one for each team:
src/Matterhorn/App.hs:91:    case finalSt^.csCurrentTeam.tsEditState.cedSpellChecker of

This lens should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:435:    ch <- use (csCurrentTeam.tsPendingChannelChange)

These should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:499:            csCurrentTeam.tsPendingChannelChange .= Nothing
src/Matterhorn/State/Channels.hs:512:                                csCurrentTeam.tsPendingChannelChange .=
src/Matterhorn/State/Channels.hs:524:                                csCurrentTeam.tsPendingChannelChange .=

These should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:731:            csCurrentTeam.tsFocus %= Z.filterZipper ((/= cId) . channelListEntryChannelId)

These should resolve to the team owning the channel in question:
src/Matterhorn/State/Channels.hs:1062:            csCurrentTeam.tsPendingChannelChange .= (Just $ ChangeByChannelId chanId act)
src/Matterhorn/State/Channels.hs:1078:            csCurrentTeam.tsPendingChannelChange .= (Just $ ChangeByUserId $ user^.uiId)

csCurrentTeamId:

This team ID should be an argument to refreshChannelsAndUsers:
src/Matterhorn/State/Channels.hs:265:    myTId <- use csCurrentTeamId

This team ID should be the one that owns the channel provided to refreshChannel:
src/Matterhorn/State/Channels.hs:310:    myTId <- use csCurrentTeamId

This team ID should be the one that owns the channel provided to updateChannelNotifyProps:
src/Matterhorn/State/Channels.hs:1141:    tId <- use csCurrentTeamId

This should iterate over all connected teams rather than just writing the state for the current team:
src/Matterhorn/LastRunState.hs:78:        tId = cs^.csCurrentTeamId
